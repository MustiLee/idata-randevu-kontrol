version: '3.8'

services:
  postgres:
    image: postgres:15-alpine
    container_name: idata-postgres
    restart: unless-stopped
    environment:
      - POSTGRES_DB=idata_appointment_checker
      - POSTGRES_USER=postgres
      - POSTGRES_PASSWORD=postgres123
    ports:
      - "5432:5432"
    volumes:
      - postgres_data:/var/lib/postgresql/data
    networks:
      - appointment-network
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U postgres"]
      interval: 30s
      timeout: 10s
      retries: 5

  appointment-checker:
    build: .
    container_name: idata-appointment-checker
    restart: unless-stopped
    depends_on:
      postgres:
        condition: service_healthy
    environment:
      # General Configuration
      - CHECK_INTERVAL_MINUTES=${CHECK_INTERVAL_MINUTES:-15}
      - HEADLESS_BROWSER=${HEADLESS_BROWSER:-true}
      - LOG_LEVEL=${LOG_LEVEL:-INFO}
      
      # Telegram Configuration
      - TELEGRAM_ENABLED=${TELEGRAM_ENABLED:-false}
      - TELEGRAM_BOT_TOKEN=${TELEGRAM_BOT_TOKEN}
      - TELEGRAM_CHAT_ID=${TELEGRAM_CHAT_ID}
      
      # Email Configuration
      - EMAIL_ENABLED=${EMAIL_ENABLED:-false}
      - EMAIL_SMTP_SERVER=${EMAIL_SMTP_SERVER:-smtp.gmail.com}
      - EMAIL_SMTP_PORT=${EMAIL_SMTP_PORT:-587}
      - EMAIL_SMTP_USERNAME=${EMAIL_SMTP_USERNAME}
      - EMAIL_SMTP_PASSWORD=${EMAIL_SMTP_PASSWORD}
      - EMAIL_FROM=${EMAIL_FROM}
      - EMAIL_TO=${EMAIL_TO}
      
      # Database Configuration
      - DATABASE_ENABLED=${DATABASE_ENABLED:-true}
      - DATABASE_HOST=postgres
      - DATABASE_PORT=5432
      - DATABASE_NAME=idata_appointment_checker
      - DATABASE_USER=postgres
      - DATABASE_PASSWORD=postgres123
      
      # Appointment Configuration
      - RESIDENCE_CITY=${RESIDENCE_CITY:-Ä°stanbul}
      - IDATA_OFFICES=${IDATA_OFFICES:-Altunizade,Gayrettepe}
      - TRAVEL_PURPOSE=${TRAVEL_PURPOSE:-Tourism}
      - SERVICE_TYPE=${SERVICE_TYPE:-Standard}
      - NUM_PERSONS=${NUM_PERSONS:-1}
    volumes:
      - ./logs:/app/logs
    networks:
      - appointment-network

volumes:
  postgres_data:

networks:
  appointment-network:
    driver: bridge